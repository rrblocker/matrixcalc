#!/usr/bin/perl

$| = 0;

use vars qw/ %opt /;
use Getopt::Std;

my $opt_string = 'df:';
getopts( "$opt_string", \%opt );
my $debug = 0;
if ($opt{'d'}) { $debug = 1; print " ------------ DEBUGGING TURNED ON ------------\n"; }

if ($opt{'f'}) { 
	$infilename = $opt{'f'};
} else {
  &usage;
}

my @inv = ();
my @reihe = ();


# parse input file - assign each pitch class 
# of the set to an array
# assign each pitch class of the inversion 
# of the set to an array
open IN, $infilename;
while (<IN>) {
    @reihe = split (/\,/);
    for (my $x = 0; $x < 12; $x++) {
      push @inv, ((12 - $reihe[$x])%12);
    }
}
close (IN);

###
# print numerical representations of the matrix to STDOUT
###

# print the 12 x 12 matrix of the set
foreach my $y (@inv) {
   for (my $x = 0; $x < 12; $x++) {
	printf "%-3d", (($y + $reihe[$x])%12);
   }
   print "\n";
}
print "\n";

# print the four basic forms at T = 0
my %pri = ("O ", \@reihe, "I ", \@inv);
my %rev = ("R ", \@reihe, "RI", \@inv);
# Original and Inversion
foreach my $tag (keys %pri) {
    printf "%s -- ", $tag;
    for (my $x = 0; $x < 12; $x++) {
      printf "%d:%-3d", ($x + 1), @{@pri{$tag}}[$x];
    }
    print "\n";
}
# Retrogrades of O and I
foreach my $tag (keys %rev) {
    printf "%s -- ", $tag;
    for (my $x = 11; $x > -1; $x--) {
      printf "%d:%-3d", (12 - $x), @{@rev{$tag}}[$x];
    }
    print "\n";
}
print "\n\n"; 

###
# Use Lilypond to output a PDF of the matrix in musical notation
###

# some basic things we'll need
my @notes = ('c\'\'!', 'cis\'\'', 'd\'\'!', 'ees\'\'', 'e\'\'!', 'f\'!', 'fis\'', 'g\'!', 'gis\'', 'a\'!', 'bes\'', 'b\'!');
my @Romans = ('I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII');
my $tempfile = `/bin/mktemp $infilename.XXXXXX` or die "Cannot make temporary file: $!";
chop $tempfile;

open TEMPFILE, ">$tempfile";

# Header layout and defaults for the lilypond input file
print TEMPFILE <<_EOF;
\\version "2.8.7"
\\paper {
    myStaffSize = #16
	#(define fonts
        (make-pango-font-tree "Times New Roman"
                          "Nimbus Sans"
                          "Courier"
            	          (/ myStaffSize 16
            )
        )
    )
}
#(set-global-staff-size 16)
#(set-default-paper-size "letter")
\\header {
    tagline = "Generated by matrixcalc.pl"
}
VoiceTimeSig = \\time 1/4
VoiceClef = \\clef treble
VoiceProlog = {
	\\VoiceTimeSig
	\\VoiceClef
	\\override Voice.Stem #'transparent = ##t
	\\override Staff.TimeSignature #'transparent = ##t
}
_EOF

# print the markup for the notes of the matrix
for (my $x = 0; $x < 12; $x++) {
  my $R = $Romans[$x];
  print TEMPFILE "\tVoice${R} = {\n\t\t";
  for (my $j = 0; $j < 12; $j++) {
    print TEMPFILE $notes[(($inv[$j] + $reihe[$x])%12)];
    if ($j < 11) {
      print TEMPFILE " \\bar \":\" ";
    } else {
      print TEMPFILE " \\bar \"||\" ";
    }
  }
  for (my $j = 0; $j < 12; $j++) {
    print TEMPFILE $notes[(($reihe[$x] - $inv[$j])%12)];
    if ($j < 11) {
      print TEMPFILE " \\bar \":\" ";
    } else {
      print TEMPFILE " \\bar \"||\" ";
    }
  }  
  print TEMPFILE "\n\t\t}\n";
  print TEMPFILE <<_EOF;    
Voice${R}MusicVoice = \\context Voice = Voice${R}  {
  \\VoiceProlog 
  \\Voice${R}
}
_EOF
}

# print the lilypond score lines for each row containing the notes
print TEMPFILE <<_EOF;
\\score {
	<<
     \\new StaffGroup 
        <<
_EOF
foreach my $i (0..11) {
    my $R = $Romans[$i];
    print TEMPFILE <<_EOF;

	\\new Staff << {
                \\Voice${R}MusicVoice
                }
        >>
_EOF
}

# print the "header" at the bottom of the page
print TEMPFILE <<_EOF;
      >>
  >>
     \\layout {
        indent = 1.5\\in
    }

	\\header {
        breakbefore = ##f
    }
}
_EOF

# print the text numeric matrix
print TEMPFILE <<_EOF;
\\markup {
 \\override #'(font-family . typewriter) {
    \\fill-line {
      \\column {

_EOF
foreach my $y (@inv) {
   print TEMPFILE "\\line { \"";
   for (my $x = 0; $x < 12; $x++) {
	printf TEMPFILE "%-3d", (($y + $reihe[$x])%12);
   }
   print  TEMPFILE "\" }\n";
}
print  TEMPFILE "\n";
print TEMPFILE  <<_EOF;
      }
    }
  }
}
_EOF

# print the text numeric of the four basic forms
print TEMPFILE <<_EOF;


\\markup {
 \\override #'(font-family . typewriter) {
    \\fill-line {
      \\column {
_EOF

print TEMPFILE "\\line { \" \" }\n";
print TEMPFILE "\\line { \" \" }\n";

my ($reihe, $inv) = @_;
my %pri = ("O ", \@reihe, "I ", \@inv);
my %rev = ("R ", \@reihe, "RI", \@inv);
foreach my $tag (keys %pri) {
    print TEMPFILE "\\line { \"";
    printf  TEMPFILE "%s -- ", $tag;
    for (my $x = 0; $x < 12; $x++) {
      printf  TEMPFILE "%d:%-3d", ($x + 1), @{@pri{$tag}}[$x];
    }
    print  TEMPFILE "\" }\n";
}


foreach my $tag (keys %rev) {
    print TEMPFILE "\\line { \"";
    printf  TEMPFILE "%s -- ", $tag;
    for (my $x = 11; $x > -1; $x--) {
      printf  TEMPFILE "%d:%-3d", (12 - $x), @{@rev{$tag}}[$x];
    }
    print  TEMPFILE "\" }\n";
}
print TEMPFILE  <<_EOF;
      }
    }
  }
}
_EOF

close TEMPFILE;

# run lilypond
system("/bin/mv $tempfile $tempfile\.ly");
if ($debug) {
	system("lilypond -o $tempfile $tempfile\.ly");
	print "Leavng lilypond interim files: $tempfile\.ly, $tempfile\.ps\n";
} else {
	system("lilypond -o $tempfile $tempfile\.ly >/dev/null 2>&1");
	system("/bin/rm -f $tempfile\.dvi $tempfile\.ps $tempfile\.ly");
}
print "PDF file in $tempfile\.pdf\n";


sub usage {
  print "USAGE: $0 -f <file name>\n";
  print "Input <file name> must contain a comma-delimited numeric 12-tone series on each line.\n";
  exit 1;
}


